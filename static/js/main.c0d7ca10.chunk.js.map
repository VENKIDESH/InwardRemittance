{"version":3,"sources":["components/bCoins.js","components/wCoins.js","components/cCoin.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","BCoins","_ref","bCoins","classes","react_default","a","createElement","Box","width","Typography","align","style","fontWeight","fontSize","TableContainer","component","Paper","Table","className","size","aria-label","TableHead","TableRow","TableCell","TableBody","map","bCoin","key","symbol","scope","price","WCoins","wCoins","wCoin","MarketName","Last","CCoins","cCoins","cCoin","symbol1","symbol2","maxPrice","App","state","display","flexflow","components_bCoins","this","components_wCoins","components_cCoin","_this2","fetch","then","res","json","data","setState","catch","console","log","pairs","result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0d7ca10.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Box,Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n});\r\n\r\nconst BCoins = ({bCoins}) => {\r\n    const classes = useStyles();\r\n    return (\r\n    \r\n        <Box width=\"33%\" >\r\n            <Typography align=\"center\" style={{fontWeight:\"bolder\", fontSize:\"20px\"}}>Binance Coin Conversion List</Typography>\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell style={{fontWeight:\"bolder\"}}>Conversion Between</TableCell>\r\n            <TableCell align=\"right\" style={{fontWeight:\"bolder\"}}>Conversion Value</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {bCoins.map((bCoin) => (\r\n            <TableRow key={bCoin.symbol}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {bCoin.symbol}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{bCoin.price}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer></Box>\r\n    \r\n    )\r\n};\r\n\r\nexport default BCoins","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Box,Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n});\r\n\r\nconst WCoins = ({wCoins}) => {\r\n    const classes = useStyles();\r\n    return (\r\n      <Box width=\"33%\" >\r\n            <Typography align=\"center\" style={{fontWeight:\"bolder\", fontSize:\"20px\"}}>Bittrex Coin Conversion List</Typography>\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell style={{fontWeight:\"bolder\"}}>Conversion Between</TableCell>\r\n            <TableCell align=\"right\" style={{fontWeight:\"bolder\"}}>Conversion Value</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {wCoins.map((wCoin) => (\r\n            <TableRow key={wCoin.MarketName}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {wCoin.MarketName}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{wCoin.Last}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer></Box>\r\n    \r\n    )\r\n};\r\n\r\nexport default WCoins","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Box,Typography } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n});\r\n\r\nconst CCoins = ({cCoins}) => {\r\n    const classes = useStyles();\r\n    return (\r\n    \r\n        <Box width=\"33%\" >\r\n            <Typography align=\"center\" style={{fontWeight:\"bolder\", fontSize:\"20px\"}}>cex Coin Conversion List</Typography>\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell style={{fontWeight:\"bolder\"}}>Conversion Between</TableCell>\r\n            <TableCell align=\"right\" style={{fontWeight:\"bolder\"}}>Conversion Value</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {cCoins.map((cCoin) => (\r\n            <TableRow key={cCoin.symbol1}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {cCoin.symbol1}/{cCoin.symbol2}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{cCoin.maxPrice}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer></Box>\r\n    \r\n    )\r\n};\r\n\r\nexport default CCoins","import React, { Component } from \"react\";\r\nimport BCoins from \"./components/bCoins\";\r\nimport WCoins from \"./components/wCoins\";\r\nimport CCoins from \"./components/cCoin\";\r\nimport { Box } from \"@material-ui/core\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Box display=\"flex\" flexflow=\"row\">\r\n        <BCoins bCoins={this.state.bCoins} />\r\n        <WCoins wCoins={this.state.wCoins} />\r\n        <CCoins cCoins={this.state.cCoins} />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  state = {\r\n    bCoins: [],\r\n    cCoins: [],\r\n    wCoins: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://api.binance.com/api/v1/ticker/allPrices\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        this.setState({ bCoins: data });\r\n      })\r\n      .catch(console.log);\r\n    fetch(\"https://cex.io/api/currency_limits\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        this.setState({ cCoins: data.data.pairs });\r\n      })\r\n      .catch(console.log);\r\n    fetch(\"https://api.bittrex.com/api/v1.1/public/getmarketsummaries\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        this.setState({ wCoins: data.result });\r\n      })\r\n      .catch(console.log);\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}